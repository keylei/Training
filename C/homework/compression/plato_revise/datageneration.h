#ifndef DATAGENERATION_H
#define DATAGENERATION_H

//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//grace171017 常量与宏函数定义
#define ARR_COUNT 1000               // 数组的数量 //rime  数组长度不应该在这里定义, 应该通过参数在外部传入
#define MAX_ARR_LENGTH 5000          // 最大数组长度
#define MIN_ARR_LENGTH 2048          // 最小数组长度
#define DATA_MAX 500000              // 最大数据是5000，这里先扩大100倍   //rime 是什么是5000, 为什么要扩大100倍, 这种也应该是根据输入的数据大小自动配置, 写死一个值好么
#define DECIMAL_PRECISION 0.01       // 小数精确度(精确到小数点后两位)

// 生成随机的数组长度和随机float型数据
#define RANDOM_ARR_LENGTH (rand()%(MAX_ARR_LENGTH-MIN_ARR_LENGTH)+MIN_ARR_LENGTH)
#define RANDOM_ARR_DATA ((float)(rand()%DATA_MAX)*DECIMAL_PRECISION)
//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//plato171110 生成数据部分的函数声明

//rime 对于这种命名最好的就使用generateData就可以了,一般get/set都是访存函数,用于内部很简单的逻辑
/*
*  @brief 随机生成1000个数组
*         每个数组长度在2048到5000之间
*         数组中的数据在0.00到5000.00之间
*         将所有生成的数据放在一个指针里
*  @param pArrLength：保存各个生成的数组的长度
*  @return pFloatData: 返回保存数据的指针
*/
float *getpData(short *pArrLength);

/*
 * rime 命名不好  findImgOffset就好了
 * rime  getDataOffset 根本就不应该出现在这里, datageneration.h就应该仅仅负责数据的生成而已
*  @brief 获取大数组中的数据的偏移量  //rime 啥叫大数组
*         该偏移为数组索引号对应的数组在整个大数组中的偏移
*  @param pArrLength：保存各个生成数组的长度
*         arrIndex：数组索引号
*  @return dataOffset: 返回数据的偏移量
*/
int getDataOffset(short *pArrLength,
                  int arrIndex);
//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//p 增加了删除目录及文件的函数
/*rime 这种删除目录不应该出现在这个文件中, 再者如果带有递归的,需要加上recursively
*  @brief 递归删除目录及文件(删除该目录以及该目录包含的文件和目录)
*  @param dir: 要删除的路径名称
*  @return 0: 执行成功
*         -1：执行失败
*/
int removeDir(const char *dir);//rime p跑哪里去了

#endif // DATAGENERATION_H
