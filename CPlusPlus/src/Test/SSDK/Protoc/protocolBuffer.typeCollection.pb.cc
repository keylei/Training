// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocolBuffer.typeCollection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocolBuffer.typeCollection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocolBuffer {

namespace {

const ::google::protobuf::Descriptor* typeCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  typeCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocolBuffer_2etypeCollection_2eproto() {
  protobuf_AddDesc_protocolBuffer_2etypeCollection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocolBuffer.typeCollection.proto");
  GOOGLE_CHECK(file != NULL);
  typeCollection_descriptor_ = file->message_type(0);
  static const int typeCollection_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, int32id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, int64id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, uint32id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, uint64id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, sint32id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, sint64id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, fint32id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, fint64id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, sfint32id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, sfint64id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, isnull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, with_),
  };
  typeCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      typeCollection_descriptor_,
      typeCollection::default_instance_,
      typeCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(typeCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(typeCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocolBuffer_2etypeCollection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    typeCollection_descriptor_, &typeCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocolBuffer_2etypeCollection_2eproto() {
  delete typeCollection::default_instance_;
  delete typeCollection_reflection_;
}

void protobuf_AddDesc_protocolBuffer_2etypeCollection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#protocolBuffer.typeCollection.proto\022\016p"
    "rotocolBuffer\"\200\002\n\016typeCollection\022\017\n\007int3"
    "2ID\030\001 \002(\005\022\017\n\007int64ID\030\002 \002(\003\022\020\n\010uint32ID\030\003"
    " \001(\r\022\020\n\010uint64ID\030\004 \002(\004\022\020\n\010sint32ID\030\005 \002(\021"
    "\022\020\n\010sint64ID\030\006 \002(\022\022\020\n\010fint32ID\030\007 \002(\007\022\020\n\010"
    "fint64ID\030\010 \002(\006\022\021\n\tsfint32ID\030\t \002(\017\022\021\n\tsfi"
    "nt64ID\030\n \002(\020\022\016\n\006isNull\030\013 \002(\010\022\014\n\004name\030\014 \002"
    "(\t\022\016\n\006height\030\r \002(\002\022\014\n\004with\030\016 \002(\001", 312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocolBuffer.typeCollection.proto", &protobuf_RegisterTypes);
  typeCollection::default_instance_ = new typeCollection();
  typeCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocolBuffer_2etypeCollection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocolBuffer_2etypeCollection_2eproto {
  StaticDescriptorInitializer_protocolBuffer_2etypeCollection_2eproto() {
    protobuf_AddDesc_protocolBuffer_2etypeCollection_2eproto();
  }
} static_descriptor_initializer_protocolBuffer_2etypeCollection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int typeCollection::kInt32IDFieldNumber;
const int typeCollection::kInt64IDFieldNumber;
const int typeCollection::kUint32IDFieldNumber;
const int typeCollection::kUint64IDFieldNumber;
const int typeCollection::kSint32IDFieldNumber;
const int typeCollection::kSint64IDFieldNumber;
const int typeCollection::kFint32IDFieldNumber;
const int typeCollection::kFint64IDFieldNumber;
const int typeCollection::kSfint32IDFieldNumber;
const int typeCollection::kSfint64IDFieldNumber;
const int typeCollection::kIsNullFieldNumber;
const int typeCollection::kNameFieldNumber;
const int typeCollection::kHeightFieldNumber;
const int typeCollection::kWithFieldNumber;
#endif  // !_MSC_VER

typeCollection::typeCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocolBuffer.typeCollection)
}

void typeCollection::InitAsDefaultInstance() {
}

typeCollection::typeCollection(const typeCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocolBuffer.typeCollection)
}

void typeCollection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  int32id_ = 0;
  int64id_ = GOOGLE_LONGLONG(0);
  uint32id_ = 0u;
  uint64id_ = GOOGLE_ULONGLONG(0);
  sint32id_ = 0;
  sint64id_ = GOOGLE_LONGLONG(0);
  fint32id_ = 0u;
  fint64id_ = GOOGLE_ULONGLONG(0);
  sfint32id_ = 0;
  sfint64id_ = GOOGLE_LONGLONG(0);
  isnull_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  height_ = 0;
  with_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

typeCollection::~typeCollection() {
  // @@protoc_insertion_point(destructor:protocolBuffer.typeCollection)
  SharedDtor();
}

void typeCollection::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void typeCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* typeCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return typeCollection_descriptor_;
}

const typeCollection& typeCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocolBuffer_2etypeCollection_2eproto();
  return *default_instance_;
}

typeCollection* typeCollection::default_instance_ = NULL;

typeCollection* typeCollection::New() const {
  return new typeCollection;
}

void typeCollection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<typeCollection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(int64id_, fint64id_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(sfint64id_, isnull_);
    ZR_(with_, height_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool typeCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocolBuffer.typeCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 int32ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32id_)));
          set_has_int32id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int64ID;
        break;
      }

      // required int64 int64ID = 2;
      case 2: {
        if (tag == 16) {
         parse_int64ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64id_)));
          set_has_int64id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uint32ID;
        break;
      }

      // optional uint32 uint32ID = 3;
      case 3: {
        if (tag == 24) {
         parse_uint32ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32id_)));
          set_has_uint32id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uint64ID;
        break;
      }

      // required uint64 uint64ID = 4;
      case 4: {
        if (tag == 32) {
         parse_uint64ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64id_)));
          set_has_uint64id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sint32ID;
        break;
      }

      // required sint32 sint32ID = 5;
      case 5: {
        if (tag == 40) {
         parse_sint32ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32id_)));
          set_has_sint32id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sint64ID;
        break;
      }

      // required sint64 sint64ID = 6;
      case 6: {
        if (tag == 48) {
         parse_sint64ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64id_)));
          set_has_sint64id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_fint32ID;
        break;
      }

      // required fixed32 fint32ID = 7;
      case 7: {
        if (tag == 61) {
         parse_fint32ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fint32id_)));
          set_has_fint32id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_fint64ID;
        break;
      }

      // required fixed64 fint64ID = 8;
      case 8: {
        if (tag == 65) {
         parse_fint64ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fint64id_)));
          set_has_fint64id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_sfint32ID;
        break;
      }

      // required sfixed32 sfint32ID = 9;
      case 9: {
        if (tag == 77) {
         parse_sfint32ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sfint32id_)));
          set_has_sfint32id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_sfint64ID;
        break;
      }

      // required sfixed64 sfint64ID = 10;
      case 10: {
        if (tag == 81) {
         parse_sfint64ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sfint64id_)));
          set_has_sfint64id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_isNull;
        break;
      }

      // required bool isNull = 11;
      case 11: {
        if (tag == 88) {
         parse_isNull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnull_)));
          set_has_isnull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // required string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_height;
        break;
      }

      // required float height = 13;
      case 13: {
        if (tag == 109) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_with;
        break;
      }

      // required double with = 14;
      case 14: {
        if (tag == 113) {
         parse_with:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &with_)));
          set_has_with();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocolBuffer.typeCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocolBuffer.typeCollection)
  return false;
#undef DO_
}

void typeCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocolBuffer.typeCollection)
  // required int32 int32ID = 1;
  if (has_int32id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int32id(), output);
  }

  // required int64 int64ID = 2;
  if (has_int64id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int64id(), output);
  }

  // optional uint32 uint32ID = 3;
  if (has_uint32id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uint32id(), output);
  }

  // required uint64 uint64ID = 4;
  if (has_uint64id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uint64id(), output);
  }

  // required sint32 sint32ID = 5;
  if (has_sint32id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->sint32id(), output);
  }

  // required sint64 sint64ID = 6;
  if (has_sint64id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->sint64id(), output);
  }

  // required fixed32 fint32ID = 7;
  if (has_fint32id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->fint32id(), output);
  }

  // required fixed64 fint64ID = 8;
  if (has_fint64id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->fint64id(), output);
  }

  // required sfixed32 sfint32ID = 9;
  if (has_sfint32id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->sfint32id(), output);
  }

  // required sfixed64 sfint64ID = 10;
  if (has_sfint64id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->sfint64id(), output);
  }

  // required bool isNull = 11;
  if (has_isnull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isnull(), output);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // required float height = 13;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->height(), output);
  }

  // required double with = 14;
  if (has_with()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->with(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocolBuffer.typeCollection)
}

::google::protobuf::uint8* typeCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocolBuffer.typeCollection)
  // required int32 int32ID = 1;
  if (has_int32id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int32id(), target);
  }

  // required int64 int64ID = 2;
  if (has_int64id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int64id(), target);
  }

  // optional uint32 uint32ID = 3;
  if (has_uint32id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uint32id(), target);
  }

  // required uint64 uint64ID = 4;
  if (has_uint64id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uint64id(), target);
  }

  // required sint32 sint32ID = 5;
  if (has_sint32id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->sint32id(), target);
  }

  // required sint64 sint64ID = 6;
  if (has_sint64id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->sint64id(), target);
  }

  // required fixed32 fint32ID = 7;
  if (has_fint32id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->fint32id(), target);
  }

  // required fixed64 fint64ID = 8;
  if (has_fint64id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->fint64id(), target);
  }

  // required sfixed32 sfint32ID = 9;
  if (has_sfint32id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->sfint32id(), target);
  }

  // required sfixed64 sfint64ID = 10;
  if (has_sfint64id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->sfint64id(), target);
  }

  // required bool isNull = 11;
  if (has_isnull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isnull(), target);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // required float height = 13;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->height(), target);
  }

  // required double with = 14;
  if (has_with()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->with(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocolBuffer.typeCollection)
  return target;
}

int typeCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 int32ID = 1;
    if (has_int32id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32id());
    }

    // required int64 int64ID = 2;
    if (has_int64id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64id());
    }

    // optional uint32 uint32ID = 3;
    if (has_uint32id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32id());
    }

    // required uint64 uint64ID = 4;
    if (has_uint64id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64id());
    }

    // required sint32 sint32ID = 5;
    if (has_sint32id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sint32id());
    }

    // required sint64 sint64ID = 6;
    if (has_sint64id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64id());
    }

    // required fixed32 fint32ID = 7;
    if (has_fint32id()) {
      total_size += 1 + 4;
    }

    // required fixed64 fint64ID = 8;
    if (has_fint64id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sfixed32 sfint32ID = 9;
    if (has_sfint32id()) {
      total_size += 1 + 4;
    }

    // required sfixed64 sfint64ID = 10;
    if (has_sfint64id()) {
      total_size += 1 + 8;
    }

    // required bool isNull = 11;
    if (has_isnull()) {
      total_size += 1 + 1;
    }

    // required string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float height = 13;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // required double with = 14;
    if (has_with()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void typeCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const typeCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const typeCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void typeCollection::MergeFrom(const typeCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int32id()) {
      set_int32id(from.int32id());
    }
    if (from.has_int64id()) {
      set_int64id(from.int64id());
    }
    if (from.has_uint32id()) {
      set_uint32id(from.uint32id());
    }
    if (from.has_uint64id()) {
      set_uint64id(from.uint64id());
    }
    if (from.has_sint32id()) {
      set_sint32id(from.sint32id());
    }
    if (from.has_sint64id()) {
      set_sint64id(from.sint64id());
    }
    if (from.has_fint32id()) {
      set_fint32id(from.fint32id());
    }
    if (from.has_fint64id()) {
      set_fint64id(from.fint64id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sfint32id()) {
      set_sfint32id(from.sfint32id());
    }
    if (from.has_sfint64id()) {
      set_sfint64id(from.sfint64id());
    }
    if (from.has_isnull()) {
      set_isnull(from.isnull());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_with()) {
      set_with(from.with());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void typeCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void typeCollection::CopyFrom(const typeCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool typeCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003ffb) != 0x00003ffb) return false;

  return true;
}

void typeCollection::Swap(typeCollection* other) {
  if (other != this) {
    std::swap(int32id_, other->int32id_);
    std::swap(int64id_, other->int64id_);
    std::swap(uint32id_, other->uint32id_);
    std::swap(uint64id_, other->uint64id_);
    std::swap(sint32id_, other->sint32id_);
    std::swap(sint64id_, other->sint64id_);
    std::swap(fint32id_, other->fint32id_);
    std::swap(fint64id_, other->fint64id_);
    std::swap(sfint32id_, other->sfint32id_);
    std::swap(sfint64id_, other->sfint64id_);
    std::swap(isnull_, other->isnull_);
    std::swap(name_, other->name_);
    std::swap(height_, other->height_);
    std::swap(with_, other->with_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata typeCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = typeCollection_descriptor_;
  metadata.reflection = typeCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocolBuffer

// @@protoc_insertion_point(global_scope)
