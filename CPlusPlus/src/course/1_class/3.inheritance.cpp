//#include <iostream>

//#include "circle.hpp"
//#include "dog.hpp"

//using namespace std;

//int main()
//{
//    //>>>----------------------------------------------------------------------------------------------------------
//    //1.继承概述
////    Dog dog;
////    cout << dog.legs()<<endl;
////    cout << dog.tail()<<endl;

//    //>>>----------------------------------------------------------------------------------------------------------
//    //2.调用次序
//    /*不管子类调用的是默认构造函数还是参数构造函数，
//     * 基类的默认构造函数总是被调用的*/
////    Dog dog1;
////    Dog dog2(2);
//    //继承构造函数
////    Dog dog3(3);

//    //>>>----------------------------------------------------------------------------------------------------------
//    //3.类型转换
//    //指针向上转型，会自带类型的检测，只有继承关系才会编译通过
////    Animal* pAnimal;
////    Dog dog;
////    pAnimal = &dog;

////    Animal& ref(dog);//引用

//    //>>>----------------------------------------------------------------------------------------------------------
//    //4.虚函数

//    /*
//     * 连接函数调用和函数体的叫绑定，
//     *      1.在程序运行前的叫做静态绑定/编译绑定
//     *      2.在程序运行是的叫动态绑定/动态绑定
//    */
////    Animal animal;
////    Dog dog;
////    animal.run();//静态绑定
////    dog.run();//调用各自的函数，而不会出错

//    Animal* pAnimal;
//    Dog dog1;
//    pAnimal = &dog1;
//    pAnimal->run();//静态绑定

//    return 0;
//}
