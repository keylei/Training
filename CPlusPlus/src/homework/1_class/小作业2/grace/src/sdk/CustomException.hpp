#ifndef CUSTOMEXCEPTION_H
#define CUSTOMEXCEPTION_H


#include <sstream>
#include <iostream>


namespace SSDK
{
//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//宏函数 自定义抛出的异常信息

/**
*  @brief 自定义抛出的异常信息
*  @param exMsg:原来的异常信息
*  @return NA
*/
#define THROW_EXCEPTION(exMsg)\
{\
     std::ostringstream message;\
     message<<"File: "<<__FILE__<<"\n"\
                  <<"Line:"<<__LINE__<<"\n"\
                  <<"Func:"<<__FUNCTION__<<"\n"\
                  <<"Detail:"<< exMsg <<"\n"\
                  << " " << "\n";\
     std::string msg = message.str();\
     throw SSDK::CustomException(msg);\
}

/**
*  @brief 自定义处理捕获的异常
*  @param appendedMsg：追加的信息
*  @return NA
*/
#define CATCH_AND_RETHROW_EXCEPTION_WITH_OBJ(appendedMsg)\
catch (CustomException& ex )\
{\
    std::ostringstream message;\
     message<<"File: "<<__FILE__<<"\n"\
                  <<"Line:"<<__LINE__<<"\n"\
                  <<"Func:"<<__FUNCTION__<<"\n"\
                  <<"Detail:"<< appendedMsg <<"\n"\
                  << " " << "\n"\
                  <<ex.what();\
     std::string msg = message.str();\
     throw SSDK::CustomException(msg);\
}

//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 *  @brief 自定义异常类
 *
 *  @author grace
 *  @version 1.00 2017-11-25 grace
 *                note:create it
 */
class CustomException : public std::exception
{
public:
    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //constructor & destructor

    /**
    *  @brief   将作为参数的异常信息存到成员变量
    *  @param   message:初始化成员变量m_originMsg为message
    */
    CustomException(std::string& message);

    /**
    *  @brief   默认析构函数
    */
    virtual ~CustomException();

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //set & get functions

    /**
    *  @brief   获取异常信息
    *  @return  返回存储的异常信息
    */
    virtual const char *what() const _GLIBCXX_USE_NOEXCEPT override
    {
        return m_originMsg.data();
    }

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

private :
    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //member function

    std::string m_originMsg{""};  //异常信息

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
};
}//End of namespace SSDK


#endif // CUSTOMEXCEPTION_H
