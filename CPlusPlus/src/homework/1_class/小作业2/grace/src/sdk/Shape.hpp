#ifndef SHAPE_HPP
#define SHAPE_HPP


#include "Point.hpp"


namespace SSDK
{
enum class ShapeType //形状类型
{
    RECTANGLE, //矩形
    CIRCLE     //圆形
};

/**
 *  @brief Shape
 *         包含所有需要的几何形状类型
 *
 *  @author grace
 *  @version 1.00 2017-12-18 grace
 *                note:create it
 */
class Shape
{
public:
    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //constructor & destrucotr

    Shape();
    virtual ~Shape();

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //member function

    /**
     * @brief calcArea 纯虚函数，计算面积
     * @return 面积
     */
    virtual double calcArea() const = 0;

    /**
     * @brief isContained 判断输入的坐标是否包含
     * @param xLeft 输入的坐标
     * @param xRight 输入的坐标
     * @param yTop 输入的坐标
     * @param yBottom 输入的坐标
     * @return 有两种返回方式
     *         true:表示包含
     *         false:表示不包含
     */
    virtual bool isContained(double xLeft,
                             double xRight,
                             double yTop,
                             double yBottom) const = 0;

    //get boundary value
    //rime 其实像这种函数已经没有存在的价值了，直接可以通过Shape.pt.XPos/YPos获得
    double getXPos() const {return m_pt.xPos();}
    double getYPos() const {return m_pt.yPos();}

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //get & set function

    ShapeType shapeType() const {return m_shapeType;}
    void setShapeType(ShapeType &shapeType) {m_shapeType = shapeType;}

    Point getPt() const {return m_pt;}//rime 为什么要加get
    void setPt(const Point &pt) {m_pt = pt;}

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


protected:
    //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //member variant

    Point m_pt;  //形状中心点
    ShapeType m_shapeType; //形状类型

    //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
};
}


#endif // SHAPE_HPP
