#! /bin/bash
################################################################################
#								随机显示俄罗斯方块作业要求：
#								1、俄罗斯方块颜色随机显示
#								2、俄罗斯方块形状随机显示
#								3、每隔1秒更新一次形状与颜色
################################################################################

##############################定义全局变量#######################################

#定义各种类方块坐标的数组：
box0=(0 2 0 3 1 2 1 3)
box1=(0 3 1 3 1 2 2 2 0 1 0 2 1 2 1 3)
box2=(0 2 1 2 1 3 2 3 0 3 0 2 1 2 1 1)
box3=(0 3 1 3 2 3 3 3 1 0 1 1 1 2 1 3)
box4=(0 3 0 2 0 1 1 1 0 2 1 2 2 2 2 3 0 3 1 3 1 2 1 1 0 2 0 3 1 3 2 3)
box5=(0 1 1 1 1 2 1 3 0 3 0 2 1 2 2 2 0 1 0 2 0 3 1 3 0 3 1 3 2 3 2 2)
box6=(0 2 1 2 2 2 1 3 0 1 0 2 0 3 1 2 1 2 0 3 1 3 2 3 1 1 1 2 1 3 0 2)

#记录各方块角度种类数目的数组：
angleCountTable=(1 2 2 2 4 4 4)					

#存放所有方块坐标的数组：	
boxTable=(${box0[@]} ${box1[@]} ${box2[@]} ${box3[@]} ${box4[@]} ${box5[@]} ${box6[@]})

#存放方块在boxTable数组中偏移量的变量，设置初始值为0：
offset=0															

#	存放所有颜色的数组,1为红色，2为绿色，3为黄色，4为蓝色，5为紫色，6为天蓝，7为白色:
colorTable=(1 2 3 4 5 6 7)	

#存放随机出的颜色的变量，设置颜色初始值为1:						
colorIndex=1	

#每个方块在boxTable数组中占用的元素数:
countPerBlock=8		

#方块距离上边框的距离:
topMargin=5

#方块距离左边框的距离:
leftMargin=10
	
									
#######################随机生成方块并计算偏移量函数##############################
#
#		输入参数：	无
#		返	 回 值：	0为正常退出
#		功    能：	通过$RANDOM生成随机的形状和其角度的索引号，再通过生成的索引号计算偏
#							移量赋给全局变量offset.
#
################################################################################
calcOffset()
{							
	#随机形状的索引号：
	local randomBoxIndex=$(( $RANDOM%${#angleCountTable[@]} ))

	#随机角度的索引号：						
	local randomAngleIndex=$(( $RANDOM%${angleCountTable[$randomBoxIndex]} ))

	#重置偏移量:		
	offset=0			

	#得出该种类型方块整体在boxTable中的偏移量：
	for (( index=0; index < $randomBoxIndex;index++ ))
	do
		(( offset+=${angleCountTable[$index]}*$countPerBlock ))
	done

	#得出生成方块在boxTable中的实际偏移量：
	(( offset+=$randomAngleIndex*$countPerBlock ))
	return 0
}



################################显示方块函数#####################################
#		
#				输入参数：	无
#				返 回 值：	0为正常退出
#				功    能：	通过偏移量确定一组坐标，并用一种随机颜色将这组坐标对应的方块打印
#									输出到屏幕。
#
################################################################################

displayBlock()
{	
	#从所有颜色中随机出一种颜色：
	colorIndex=${colorTable[(( RANDOM%${#colorTable[@]} ))]}

	#将随机出的颜色同时设置为前景色和背景色，4后接代表颜色数表示背景色，3后接表示文字颜色
	echo -e "\033[4$colorIndex;3${colorIndex}m\033[1m"

	#循环打印方块：
	for (( i = 0;i < $countPerBlock;i += 2 ))									
	do
		#计算x轴坐标,乘2是由于x坐标长度较短，用两个长度单位来表示较美观：
		(( x = $leftMargin + 2 * ${boxTable[$offset]} ))	
		(( offset++ ))																		#使偏移量到该点对应的y坐标
		(( y = $topMargin +  ${boxTable[$offset]} ))			#计算y轴坐标
		(( offset++ ))																		#使偏移量到下一点x坐标
		#根据坐标打印方块，H后为输出内容：
		echo -e "\033[${y};${x}H··"													
	done
	return 0
}


##############################主函数############################################
main()
{
	clear
	while true
	do
		tput sc				#设置光标标记

		calcOffset		#调用随机生成方块并计算偏移量函数
		displayBlock	#调用显示方块函数

		sleep 1	

		tput rc				#将光标返回到标记
		tput ed				#清除屏幕上光标后的所有内容
	done
}
main
