#!/usr/bin/env bash
#=========================================================================
# @usage
# @brief  SPC界面
# @author 斗牛组/麒麟组 (该脚本主要由plato负责完成)
# @version 1.00 2017/08/24 note:create it
#=========================================================================

declare -a lotList                      # 批次列表

declare historyFilePath="LotHistory.txt" # 批次历史检测数据的文件路径

# @brief 初始化. 这里主要完成工作:
#               1.从根目录中读取获得所有的批次号
#               2.信号的捕获: 主要接受ESC,PageDown、PageUp两个键
#               3.这里需要source所有需要的脚本
# @param
# @return
initSPCWindow()
{
   # 1.获取所有的批次号,并赋值到lotList

   # 2.处理捕获信号Esc,

   # 3.这里需要source所有需要的脚本
}



# @brief 检索相应的批次
#        具体需要显示的信息有:
#            1.顶部第一行显示该批次的良率、不良数、误报率的总计数
#            2.顶部第二行显示该批次发生不良最多的元器件、不良类型数最多的类型、
#              不良最多的Lib类型的显示
#            3.顶部第三行显示该批次x-shift、y-shift、height的cp/cpk值
#            4.顶部第四行起有一块较大区域显示x、y平均偏移量用靶状图表示，需要有XY轴，
#              然后命中标记用“×”来标识
#            5,靶状图下最后区域显示最近10块检测PCB的结果（不足10块就有多少显示多少），
#              需要包含以下字段:“序号”、 “检测时间”、“良率”、“误报率”、“不良元器件数”
#             （注意：这些数值都是基于该PCB的统计），还需要能通过PageDown、PageUp两个键
#               “向前/向后10个记录“显示，但这个过程不会导致前面1、2、3的显示发生变化
# @param 对应查询的批次名称
# @return
queryLot()
{
    # 1.显示该批次的良率、不良数、误报率的总计数 直接读取history.txt就可以了

    # 2.该批次发生不良最多的元器件、不良类型数最多的类型、不良最多的Lib类型的显示,需要读取
    #   批次目录下的文件(需求注意的是, 如果history.txt中的数据和批次目录下的数据对应不上,
    #   需要提示错误)

    # 3.顶部第三行显示该批次x-shift、y-shift、height的cp/cpk值,
    calcCpCpk
    # 在界面上显示cp/cpk的代码

    # 4.域显示x、y平均偏移量用靶状图表示，需要有XY轴，然后命中标记用“×”来标识
    # 这个是BarChartView中的函数, 传入的参数为X和Y的最大值, 以及数据集合
    showBarChart


    # 5.显示最近10块检测PCB的结果, 这是一个列表(这里需要检测时间, 直接从文件的时间戳中获取就可以了)
}

# @brief 选择批次
#        注意:
#            1.根据当前的检测数据生成批次列表
#            2.按照要求生成输入提示界面, 需要区别输入错误以及正常的没有批次数据
#            3.按下R键返回"批次选择界面"
# @param
# @return
startSPCWindow()
{
  # 1.初始化
  init

  # 2.输入接受界面
  while [[ true ]]; do

    # 2.1 生成输入提示界面

    # 2.2
    read key
    case key in
      对应的选项 )
        # 这里需要解析出选择的批次名称, 然后把批次名称作为字符串传入函数queryLot
        queryLot
        ;;

      R)
        break;;
    esac



  done
}
